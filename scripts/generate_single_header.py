#!/usr/bin/env python3
"""
Single header generator for enchantum library.
This script concatenates the core headers in the correct dependency order.
"""

import os
import re
from pathlib import Path

def extract_includes(file_path):
    """Extract #include statements from a file."""
    includes = []
    with open(file_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line.startswith('#include "'):
                # Extract the header name
                match = re.match(r'#include\s+"([^"]+)"', line)
                if match:
                    includes.append(match.group(1))
    return includes

def read_file_content(file_path):
    """Read file content, removing local includes."""
    content = []
    with open(file_path, 'r') as f:
        for line in f:
            line_stripped = line.strip()
            # Skip local includes (those with quotes)
            if line_stripped.startswith('#include "'):
                content.append(f"// {line.rstrip()} // Inlined\n")
            else:
                content.append(line)
    return ''.join(content)

def generate_single_header():
    """Generate the single header file."""
    
    # Base directory
    base_dir = Path(__file__).parent.parent / "enchantum" / "include" / "enchantum"
    
    # Header dependency order (dependencies first)
    header_order = [
        "common.hpp",
        "details/string.hpp", 
        "details/string_view.hpp",
        "details/optional.hpp",
        "details/mphf.hpp",
        "details/format_util.hpp",
        "details/generate_arrays.hpp",
        "details/enchantum_gcc.hpp",
        "details/enchantum_clang.hpp", 
        "details/enchantum_msvc.hpp",
        "type_name.hpp",
        "entries.hpp",
        "generators.hpp",
        "core.hpp",
        "algorithms.hpp",
        "bitflags.hpp",
        "bitset.hpp",
        "array.hpp",
        "bitwise_operators.hpp",
        "next_value.hpp",
        "scoped.hpp",
        "iostream.hpp",
        "fmt_format.hpp",
        "std_format.hpp",
        "all.hpp"
    ]
    
    # Start building the single header
    output = []
    
    # Header comment
    output.append("""// 
// Enchantum Single Header
// Auto-generated by scripts/generate_single_header.py
// 
// This file contains the entire enchantum library in a single header for convenience.
// For better compile times, consider using individual headers instead.
//

#pragma once

""")
    
    # Track processed files to avoid duplicates
    processed = set()
    
    for header in header_order:
        header_path = base_dir / header
        if header_path.exists() and header not in processed:
            output.append(f"// ============== {header} ==============\n")
            content = read_file_content(header_path)
            
            # Remove the #pragma once from individual files
            content = re.sub(r'#pragma once\s*\n', '', content)
            
            output.append(content)
            output.append(f"\n// ============== End {header} ==============\n\n")
            processed.add(header)
    
    # Write the output
    output_path = Path(__file__).parent.parent / "single_include" / "enchantum_single_header.hpp"
    output_path.parent.mkdir(exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(''.join(output))
    
    print(f"Generated single header: {output_path}")
    print(f"Size: {output_path.stat().st_size} bytes")

if __name__ == "__main__":
    generate_single_header()